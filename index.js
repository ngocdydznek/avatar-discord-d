const {
  Client,
  GatewayIntentBits,
  EmbedBuilder,
  ButtonBuilder,
  ButtonStyle,
  ActionRowBuilder,
  Events
} = require('discord.js');
require('dotenv').config();

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.GuildMembers
  ]
});

client.once('ready', () => {
  console.log(`‚úÖ Bot ƒë√£ ƒëƒÉng nh·∫≠p v·ªõi t√™n ${client.user.tag}`);

  const customStatuses = [
    'l·ªánh !av',
    'nh√¨n c√°i ƒë√©o g√¨',
    'V≈© H√† from 36 with love',
    'h·∫π h·∫π h·∫π'
  ];

  let index = 0;
  setInterval(() => {
    client.user.setPresence({
      activities: [{
        name: customStatuses[index],
        type: 4 // type 4 = Custom Status
      }],
      status: 'online'
    });
    index = (index + 1) % customStatuses.length;
  }, 4000); // ƒë·ªïi m·ªói 4 gi√¢y
});

client.on('messageCreate', async (message) => {
  if (message.author.bot) return;

  const args = message.content.trim().split(/\s+/);
  const command = args[0].toLowerCase();
  const aliases = ['!av', '!avt', '!avatar'];
  if (!aliases.includes(command)) return;

  let userId;
  if (message.mentions.users.size > 0) {
    userId = message.mentions.users.first().id;
  } else if (args[1]) {
    userId = args[1];
  } else {
    return message.reply('‚ö†Ô∏è Vui l√≤ng tag ho·∫∑c nh·∫≠p ID ng∆∞·ªùi d√πng.');
  }

  try {
    const user = await client.users.fetch(userId);
    const globalAvatar = user.displayAvatarURL({ dynamic: true, size: 4096 });

    let member = null;
    try {
      member = await message.guild.members.fetch(userId);
    } catch {}

    const serverAvatar = member?.avatarURL({ dynamic: true, size: 4096 });

    // Info th√™m
    const createdAt = `<t:${Math.floor(user.createdTimestamp / 1000)}:R>`;
    const joinedAt = member?.joinedAt
      ? `<t:${Math.floor(member.joinedAt.getTime() / 1000)}:R>`
      : 'Kh√¥ng c√≥ d·ªØ li·ªáu (kh√¥ng trong server)';
    const isBot = user.bot ? '‚úÖ C√≥' : '‚ùå Kh√¥ng';

    const embed = new EmbedBuilder()
      .setTitle(`üñºÔ∏è Avatar c·ªßa ${user.username}`)
      .setDescription(`**ID:** ${user.id}`)
      .addFields(
        { name: 'üåê Avatar To√†n C·ª•c', value: `[Xem ·∫£nh](${globalAvatar})`, inline: false },
        {
          name: 'üõ°Ô∏è Avatar Trong Server',
          value: serverAvatar ? `[Xem ·∫£nh](${serverAvatar})` : 'Kh√¥ng c√≥ avatar ri√™ng trong server',
          inline: false
        },
        { name: 'üìÖ T√†i kho·∫£n t·∫°o l√∫c', value: createdAt, inline: true },
        { name: '‚è±Ô∏è Tham gia server', value: joinedAt, inline: true },
        { name: 'ü§ñ L√† bot?', value: isBot, inline: true }
      )
      .setImage(serverAvatar || globalAvatar)
      .setColor(0x8e44ad);

    const bannerBtn = new ButtonBuilder()
      .setCustomId(`getBanner_${userId}`)
      .setLabel('üì∏ Xem Banner')
      .setStyle(ButtonStyle.Primary);

    const downloadGlobal = new ButtonBuilder()
      .setLabel('‚¨áÔ∏è T·∫£i Avatar To√†n C·ª•c')
      .setStyle(ButtonStyle.Link)
      .setURL(globalAvatar);

    const downloadServer = new ButtonBuilder()
      .setLabel('‚¨áÔ∏è T·∫£i Avatar Server')
      .setStyle(ButtonStyle.Link)
      .setURL(serverAvatar || globalAvatar);

    const row = new ActionRowBuilder().addComponents(bannerBtn, downloadGlobal, downloadServer);
    await message.channel.send({ embeds: [embed], components: [row] });
  } catch (err) {
    console.error(err);
    return message.reply('‚ùå Kh√¥ng th·ªÉ t√¨m th·∫•y ng∆∞·ªùi d√πng ho·∫∑c x·∫£y ra l·ªói.');
  }
});

client.on(Events.InteractionCreate, async (interaction) => {
  if (!interaction.isButton()) return;

  const userId = interaction.customId.split('_')[1];
  if (!interaction.customId.startsWith('getBanner_')) return;

  try {
    const user = await client.users.fetch(userId);
    await user.fetch();

    if (user.banner) {
      const bannerUrl = user.bannerURL({ size: 4096 });

      const embed = new EmbedBuilder()
        .setTitle(`üé¥ Banner c·ªßa ${user.username}`)
        .setImage(bannerUrl)
        .setColor(0xff4757);

      const disabledBannerBtn = new ButtonBuilder()
        .setCustomId('disabled_banner')
        .setLabel('üì∏ ƒê√£ xem Banner')
        .setStyle(ButtonStyle.Secondary)
        .setDisabled(true);

      const updatedRow = new ActionRowBuilder().addComponents(disabledBannerBtn);

      await interaction.update({ components: [updatedRow] });
      await interaction.followUp({ embeds: [embed] });
    } else {
      await interaction.reply({ content: '‚ùå Ng∆∞·ªùi d√πng n√†y kh√¥ng c√≥ banner.', ephemeral: true });
    }
  } catch (err) {
    console.error(err);
    await interaction.reply({ content: '‚ö†Ô∏è L·ªói khi l·∫•y banner.', ephemeral: true });
  }
});

const express = require('express');
const app = express();

const PORT = process.env.PORT || 3000;

app.get('/', (req, res) => {
  res.send('Bot is running!');
});

app.listen(PORT, () => {
  console.log(`Web server is listening on port ${PORT}`);
});

client.login(process.env.DISCORD_TOKEN);
